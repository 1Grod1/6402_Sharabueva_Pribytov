import numpy as np
import itertools
import math


def REF(A):
    """1.1 –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é REF(), –ø—Ä–∏–≤–æ–¥—è—â—É—é –º–∞—Ç—Ä–∏—Ü—É –∫
        —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–º—É –≤–∏–¥—É"""
    """1.3.1 –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–æ–∂–¥–∞—é—â—É—é
–º–∞—Ç—Ä–∏—Ü—É –≤ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–º –≤–∏–¥–µ."""
    rows, cols = A.shape
    k=0
    
    for r in range(rows):
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–æ–ª–±—Ü–µ
        max_row = np.argmax(A[r:rows, r])
        
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å —Å—Ç—Ä–æ–∫–æ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        A[[r, max_row+r]] = A[[max_row+r, r]]
        #–ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤–µ–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        lead = np.argmax(A[r])
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for i in range(r + 1, rows):
            if A[i, lead] != 0:
                A[i] = A[i]^A[r]
    return A


def RREF(A):
    """1.2–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é REF(), –ø—Ä–∏–≤–æ–¥—è—â—É—é –º–∞—Ç—Ä–∏—Ü—É –∫
        —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–º—É –≤–∏–¥—É"""
    rows, cols = A.shape
    for r in range(rows):
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–æ–ª–±—Ü–µ
        max_row = np.argmax(A[r:rows, r]) + r
        
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å —Å—Ç—Ä–æ–∫–æ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        A[[r, max_row]] = A[[max_row, r]]

        #–ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤–µ–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        lead = np.argmax(A[r])
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for i in range(r + 1, rows):
            if A[i, lead] != 0:
                A[i] = A[i]^A[r]
                
        #–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for j in range(r,0, -1):
            if A[j-1,lead]!=0:
                A[j-1]=A[j-1]^A[r]

    #–ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –Ω—É–ª–µ–≤—ã—Ö —Å—Ç—Ä–æ–∫
    B = A[~np.all(A == 0, axis = 1)]
    
    return B


"""–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É ùêÜ‚àó –≤ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–º –≤–∏–¥–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π."""
def Gresult(A):
    rows, cols = A.shape
    leadCol = np.array([],int)
    for r in range(rows):
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–æ–ª–±—Ü–µ
        max_row = np.argmax(A[r:rows, r]) + r
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å —Å—Ç—Ä–æ–∫–æ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        A[[r, max_row]] = A[[max_row, r]]
        #–ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤–µ–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        lead = int(np.argmax(A[r]))
        #–¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –≤–µ–¥—É—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        if (lead>0 or len(leadCol)==0):
            leadCol = np.append(leadCol,[lead])
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for i in range(r + 1, rows):
            if A[i, lead] != 0:
                A[i] = A[i]^A[r]
                
        #–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for j in range(r,0, -1):
            if A[j-1,lead]!=0:
                A[j-1]=A[j-1]^A[r]
    #–ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –Ω—É–ª–µ–≤—ã—Ö —Å—Ç—Ä–æ–∫
    B = A[~np.all(A == 0, axis = 1)]
    return B,leadCol


"""–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É ùêó, —É–¥–∞–ª–∏–≤ –≤–µ–¥—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã ùêÜ‚àó"""
def DelLead(A,leadCol):
    for i in reversed(leadCol):
        A = np.delete(A, i, 1)
    return A


"""–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É H"""
def Hmatr(A,leadCol,rows,cols):
    lenght=cols-rows
    I = np.eye(lenght,lenght,0,int)
    H = np.zeros((lenght+len(A),lenght),int)
    j=0
    k=0
    h=0
    for e in leadCol:
        if(e==h):
            H[h]=A[k]
            k=k+1
            h=h+1
        else:
            while(e!=h):
                H[h]=I[j]
                j=j+1
                h=h+1
            H[h]=A[k]
            k=k+1
            h=h+1
    while(j<lenght):
        H[h]=I[j]
        j=j+1
        h=h+1
    
    return H


"""–°–ª–æ–∂–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è"""
def SumRow(A):
    rows, cols = A.shape
    lst = list(range(rows))
    combs = []
    for i in range(2, len(lst)+1):
        els = [list(x) for x in itertools.combinations(lst, i)]
        for num in els:
            combs = np.zeros((1,cols),int)
            for j in range(len(num)):
                combs=combs^A[num[j]]
            A=np.concatenate([A, combs], axis=0)
    for i in range(len(A)):
        for j in range(i+1,len(A)):
          if np.array_equal(A[j], A[i]):
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
                A = np.delete(A, j)  # –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    return A


"""–í–∑—è—Ç—å –≤—Å–µ –¥–≤–æ–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω—ã k, —É–º–Ω–æ–∂–∏—Ç—å –∫–∞–∂–¥–æ–µ –Ω–∞ G. """
def Ymnoz(G_matr,H_matr):
    rows,cols=G_matr.shape
    num_codes = 2 ** rows
    binary_codes = np.array([[int(bit) for bit in format(i, f'0{rows}b')] for i in range(num_codes)])
    for u in binary_codes:
        v = np.dot(u,G_matr)
        v = np.mod(v,2)
        print("—Å—Ç—Ä–æ–∫–∞ V : ",v)
        print("—Å—Ç—Ä–æ–∫–∞ V*H : ",np.mod(np.dot(v,H_matr),2),"\n")
    return 1


""" –í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è –∫–æ–¥–∞."""
def Dist(matr):
    arr=[]
    for row in matr:
        k=0
        for i in range(len(row)):
            k=k+row[i]
        arr.append(k)
    return min(arr),math.ceil((min(arr)-1)/2)



""" –í–Ω–µ—Å—Ç–∏ –≤ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –æ—à–∏–±–∫—É –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ t, —É–º–Ω–æ–∂–∏—Ç—å
    –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ H, —É–±–µ–¥–∏—Ç—å—Å—è –≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏"""
def IdError(H_matr,V):
    e=np.array([0,0,1,0,0,0,0,0,0,0,0],int)
    print("–ó–∞–ª–æ–∂–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ",e)
    Ve=V^e
    Res = np.mod(np.dot(Ve,H_matr),2)
    max_pos = np.argmax(Res)
    if(Res[max_pos]==1):
        print(Res," - Error\n")
    else:
        print(Res," - So good")
    return 1



""" –ù–∞–π—Ç–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—à–∏–±–∫—É –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ t+1
    —Ç–∞–∫—É—é, —á—Ç–æ –ø—Ä–∏ —É–º–Ω–æ–∂–µ–Ω–∏–∏ –Ω–∞ H –æ—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"""
def TPlus(H_matr,V):
    e=np.array([0,0,0,0,0,0,0,0,0,0,0],int)
    er=e
    for i in range(len(e)):
        for j in range(i+1,len(e)):
            e[i]=1
            e[j]=1
            print(e)
            Ve=V^e
            Res = np.mod(np.dot(Ve,H_matr),2)
            max_pos = np.argmax(Res)
            if(Res[max_pos]==1):
                print(Res," - Error\n")
            else:
                print(Res," - So good____\n")
                er=e
            e=np.array([0,0,0,0,0,0,0,0,0,0,0],int)
    
    return er


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
A = np.array([[1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1],
              [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0],
              [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1],
              [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1],
              [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0],
              [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]], dtype=int)

ref_matr = REF(A)
print("1.1 –§—É–Ω–∫—Ü–∏—è REF\n",ref_matr)
rref_matrix = RREF(A)
print("\n1.2 –§—É–Ω–∫—Ü–∏—è RREF\n",rref_matrix)
G_matr = REF(A)
print("\n1.3.1 –§—É–Ω–∫—Ü–∏—è REF –∑–∞–¥–∞–Ω–∏–µ \n",G_matr)
G_matr = G_matr[~np.all(G_matr == 0, axis = 1)]
rows, cols = G_matr.shape
print("\n1.3.2 –∑–∞–¥–∞–Ω–∏–µ \n n = ",cols,"\nk = ",rows)
GP_matr,leadCol = Gresult(G_matr)
Xresult = DelLead(GP_matr,leadCol)
print("\n1.3.3 –∑–∞–¥–∞–Ω–∏–µ \n",Xresult,"\nLead Col = ",leadCol)
H_matr = Hmatr(Xresult,leadCol,rows, cols)
print("\n1.3.4 –§—É–Ω–∫—Ü–∏—è Hmatr  –∑–∞–¥–∞–Ω–∏–µ \n",H_matr)
print(G_matr)
sum_matr = SumRow(G_matr)
D,t=Dist(G_matr)
V= np.array([1,0,1,1,1,0,1,0,0,1,0],int)
print("\n1.4.1 –§—É–Ω–∫—Ü–∏—è SumRow  –∑–∞–¥–∞–Ω–∏–µ \n",sum_matr)
print("\n1.4.2 –§—É–Ω–∫—Ü–∏—è Ymnoz  –∑–∞–¥–∞–Ω–∏–µ \n")
real = Ymnoz(G_matr,H_matr)
print("\n1.5 –§—É–Ω–∫—Ü–∏—è  Dist –∑–∞–¥–∞–Ω–∏–µ \n Input:\n",G_matr,"\n d = ",D,"\n t = ", t)
print("\n1.5.1 –§—É–Ω–∫—Ü–∏—è IdError  –∑–∞–¥–∞–Ω–∏–µ\n")
IdError(H_matr,V)
print("\n1.5.2 –§—É–Ω–∫—Ü–∏—è IdError  –∑–∞–¥–∞–Ω–∏–µ \n")
Er = TPlus(H_matr,V)
print(" e2, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ = ", Er)
